{"version":3,"file":"static/js/MoveDex.f827f743.chunk.js","mappings":"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","sources":["newComponents/game/PokemonBadge.tsx","newComponents/game/Weakness.tsx","pages/MoveDex/components/Header.tsx","pages/MoveDex/components/MoveDetail.tsx","pages/MoveDex/MoveDex.tsx","pages/MoveDex/api.ts"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport clsx from 'clsx';\nimport { SubPokemon, BgFromType, BgToType } from '@/types/Pokemon';\n\ntype Props = {\n  pm: SubPokemon;\n  size?: string;\n  text?: string;\n};\n\nexport function PokemonBadge({ pm, size = 'text-xs', text }: Props) {\n  return (\n    <Link\n      className={clsx(\n        'whitespace-nowrap rounded text-center align-middle font-semibold text-white',\n        size,\n        'px-2.5 py-0.5',\n        'bg-gradient-to-r',\n        BgFromType[pm.types[0] as keyof typeof BgFromType],\n        BgToType[pm.types[pm.types.length - 1] as keyof typeof BgToType]\n      )}\n      to={`/pokedex/${pm.link}`}\n    >\n      {pm.nameZh}\n      {pm.altForm && `-${pm.altForm}`}\n      {text && `: ${text}`}\n    </Link>\n  );\n}\n","import clsx from 'clsx';\n\nimport { TYPE_MAP } from '@/types/Pokemon';\nimport { Icon } from '@/newComponents';\n\nimport weaknessMap from '@/data/weakness_map_zh.json';\n\ntype WeaknessMap = Record<string, Record<string, number>>;\n\ntype Props = {\n  types: string[];\n  terasType?: string | null;\n};\n\ntype RateProps = {\n  targetRate: number;\n} & Props;\n\ntype EffectiveProps = {\n  type: string;\n  targetRate: number;\n  title: string;\n};\n\nexport function getWeaknessType(types: string[]) {\n  return TYPE_MAP.map((type) => {\n    return {\n      type: type,\n      rate: types.reduce((rate, pmType) => {\n        return rate * (weaknessMap as WeaknessMap)[type][pmType];\n      }, 1),\n    };\n  });\n}\n\nexport function getAttackRange(types: string[]) {\n  return TYPE_MAP.map((type) => {\n    return {\n      type: type,\n      rates: types\n        .map((atkType) => (weaknessMap as WeaknessMap)[atkType][type])\n        .filter((rate) => rate > 1),\n    };\n  }).filter(({ rates }) => rates.length > 0);\n}\n\nfunction TypeRate({ targetRate, types }: RateProps) {\n  const matchType = getWeaknessType(types).filter(({ rate }) => rate === targetRate);\n\n  if (matchType.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"space-y-2 py-2\">\n      <h6 className=\"font-bold text-gray-500\">{targetRate}ÂÄç</h6>\n      <div className=\"flex flex-wrap gap-2\">\n        {matchType.map(({ type }) => (\n          <Icon.Game.Type type={type} className={clsx('h-8 w-8')} key={type} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport function Weakness({ types, terasType = null }: Props) {\n  return (\n    <>\n      <div className=\"grid grid-cols-2 gap-x-2 md:flex md:justify-around\">\n        {[4, 2, 0.5, 0.25, 0].map((rate) => (\n          <TypeRate targetRate={rate} types={terasType != null ? [terasType] : types} key={rate} />\n        ))}\n      </div>\n    </>\n  );\n}\n\nexport function MoveEffective({ title, type, targetRate }: EffectiveProps) {\n  const showList = TYPE_MAP.map((targetType) => {\n    return {\n      type: targetType,\n      rate: (weaknessMap as WeaknessMap)[type][targetType],\n    };\n  }).filter(({ rate }) => rate === targetRate);\n\n  if (showList.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <div>\n      <hr className=\"my-3 h-px border-0 bg-gray-200\" />\n      <h6 className=\"whitespace-nowrap text-lg font-bold\">{title}</h6>\n      <div className=\"flex flex-wrap gap-2\">\n        {TYPE_MAP.map((targetType) => {\n          return {\n            type: targetType,\n            rate: (weaknessMap as WeaknessMap)[type][targetType],\n          };\n        })\n          .filter(({ rate }) => rate === targetRate)\n          .map(({ type }) => (\n            <Icon.Game.Type type={type} className={clsx('h-6 w-6')} key={type} />\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport function AttackRange({ types }: Props) {\n  return (\n    <div className=\"flex flex-wrap gap-x-2\">\n      {getAttackRange(types).map(({ type }) => (\n        <Icon.Game.Type type={type} className={clsx('h-6 w-6')} key={type} />\n      ))}\n    </div>\n  );\n}\n","import clsx from 'clsx';\nimport { Buttons, SearchBar, SubTitleSlide } from '@/newComponents/common';\nimport { Icon } from '@/newComponents';\nimport { ValueKeys } from '@/utils';\nimport { Filter } from '../MoveDex';\nimport { TYPE_MAP } from '@/types/Pokemon';\n\ntype Props = {\n  filter: Filter;\n  updateState: (key: ValueKeys<Filter, string>[keyof Filter]) => (val: string) => void;\n};\n\nexport function Header({ filter, updateState }: Props) {\n  const typeUpdate = updateState('type');\n  const categoryUpdate = updateState('category');\n\n  return (\n    <header>\n      <div className=\"flex flex-col justify-between gap-x-2 md:flex-row md:items-center\">\n        <div className=\"flex items-center gap-2\">\n          <div className={clsx('rounded-xl p-2', 'bg-custom-blue', 'hidden md:block')}>\n            <Icon.Book className=\"h-5 w-5 fill-current\" />\n          </div>\n          <h2 className=\"text-xl\">ÊãõÂºèÊ∏ÖÂñÆ</h2>\n        </div>\n        <div className=\"flex w-full items-center gap-x-3 md:w-96\">\n          <SearchBar\n            placeholder={'ÊêúÂ∞ã ÂêçÁ®±(‰∏≠/Ëã±/Êó•), ‰ªãÁ¥π'}\n            value={filter.keyword}\n            onChange={updateState('keyword')}\n          />\n        </div>\n      </div>\n      <div className=\"flex flex-col gap-2\">\n        <SubTitleSlide title=\"Â±¨ÊÄß\" />\n        <div className=\"flex w-full flex-wrap justify-items-center gap-x-4 gap-y-3 pb-2 pl-2\">\n          {TYPE_MAP.map((type) => (\n            <button onClick={() => typeUpdate(type)} key={type}>\n              <Icon.Game.Type\n                type={type}\n                className={clsx(\n                  'h-8 w-8',\n                  filter.type !== '' && filter.type !== type && 'opacity-30'\n                )}\n              />\n            </button>\n          ))}\n        </div>\n        <SubTitleSlide title=\"ÂàÜÈ°û\" />\n        <Buttons\n          list={[\n            { name: 'Áâ©ÁêÜ', val: 'Áâ©ÁêÜ' },\n            { name: 'ÁâπÊÆä', val: 'ÁâπÊÆä' },\n            { name: 'ËÆäÂåñ', val: 'ËÆäÂåñ' },\n          ]}\n          currVal={filter.category}\n          updateState={(val) => categoryUpdate(val)}\n        />\n      </div>\n    </header>\n  );\n}\n","import { PokemonBadge } from '@/newComponents/game';\nimport { FullMove, LevelMap } from '@/types/Pokemon';\n\nexport function MoveDetail({\n  move,\n  onlyEvolve,\n  setOnlyEvolve,\n}: {\n  move: FullMove;\n  onlyEvolve: boolean;\n  setOnlyEvolve: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  return (\n    <div className=\"flex w-full flex-col text-gray-500\">\n      <h6 className=\"flex justify-between py-2 text-lg font-bold\">\n        <span>Ë™™Êòé</span>\n        <div className=\"flex items-center\">\n          <input\n            id={'showChild'}\n            type=\"checkbox\"\n            checked={onlyEvolve}\n            className=\"h-4 w-4 rounded border-gray-300 bg-gray-100 text-blue-800 focus:ring-1 focus:ring-blue-800\"\n            onChange={(e) => setOnlyEvolve(e.target.checked)}\n          />\n          <label htmlFor={'showChild'} className=\"ml-2 text-sm\">\n            ÂÉÖÈ°ØÁ§∫ÈÄ≤ÂåñÂûã\n          </label>\n        </div>\n      </h6>\n      <p>{move.description}</p>\n      {move.levelingUps.length > 0 && (\n        <>\n          <hr className=\"my-3 h-px border-0 bg-gray-200\" />\n          <h6 className=\"py-2 text-lg font-bold\">ÂçáÁ≠â / ÈÄ≤Âåñ / ÂõûÊÜ∂ÊãõÂºè</h6>\n          <div className=\"flex flex-wrap gap-2\">\n            {move.levelingUps\n              .filter((pm) => (onlyEvolve ? pm.child === undefined : true))\n              .map((pm) => {\n                let text = `Lv${pm.level}`;\n                if (pm.level < 1) {\n                  text = LevelMap[pm.level];\n                }\n\n                return <PokemonBadge pm={pm} key={pm.link} text={text} />;\n              })}\n          </div>\n        </>\n      )}\n      {move.egg.length > 0 && (\n        <>\n          <hr className=\"my-3 h-px border-0 bg-gray-200\" />\n          <h6 className=\"py-2 text-lg font-bold\">ÈÅ∫ÂÇ≥ÊãõÂºè(Ê®°‰ªøÈ¶ôËçâ)</h6>\n          <div className=\"flex flex-wrap gap-2\">\n            {move.egg\n              .filter((pm) => (onlyEvolve ? pm.child === undefined : true))\n              .map((pm) => {\n                return <PokemonBadge pm={pm} key={pm.link} />;\n              })}\n          </div>\n        </>\n      )}\n      {move.TM && (\n        <>\n          <hr className=\"my-3 h-px border-0 bg-gray-200\" />\n          <h6 className=\"py-2 text-lg font-bold\">ÊãõÂºèÊ©ü</h6>\n          <ul className=\"text-gray-5000 max-w-md list-inside list-disc space-y-1 pb-2\">\n            <li>Á∑®ËôüÔºö#{move.TM.pid.toString().padStart(3, '0')}</li>\n            <li>ËÅØÁõüÈªûÊï∏Ôºö{move.TM.leaguePoint}</li>\n            <li>ÊùêÊñôÔºö{move.TM.materials.map((pm) => `${pm.part}x${pm.count}`).join('; ')}</li>\n          </ul>\n          <div className=\"flex flex-wrap gap-2\">\n            {move.TM?.pm\n              .filter((pm) => (onlyEvolve ? pm.child === undefined : true))\n              .map((pm) => {\n                return <PokemonBadge pm={pm} key={pm.link} />;\n              })}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport clsx from 'clsx';\n\nimport { Hr } from '@/newComponents/common';\nimport { Icon } from '@/newComponents';\nimport { Accuracy, FullMove, Move } from '@/types/Pokemon';\nimport { ValueKeys, api } from '@/utils';\n\nimport { Header, MoveDetail } from './components';\nimport { useMoveListInfo } from './api';\n\nexport type Filter = {\n  keyword: string;\n  type: string;\n  category: string;\n  page: number;\n};\n\ntype colValue = {\n  row: Move;\n  fn?: () => void;\n  checked?: boolean;\n};\n\nconst columns = [\n  {\n    header: 'ÊåëÈÅ∏',\n    value: ({ fn = () => {}, checked = false }: colValue) => (\n      <input\n        type=\"checkbox\"\n        checked={checked}\n        onChange={() => {}}\n        onClick={(e) => {\n          e.stopPropagation();\n          fn();\n        }}\n        className=\"h-5 w-5 rounded border-gray-300 bg-gray-100 text-blue-600 focus:ring-2 focus:ring-blue-500\"\n      />\n    ),\n    meta: 'w-[10%]',\n  },\n  {\n    header: 'ÊãõÂºèÂêçÁ®±',\n    value: ({ row }: colValue) => (\n      <a\n        href={`https://wiki.52poke.com/zh-hant/${row.nameZh}ÔºàÊãõÂºèÔºâ`}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        className=\"text-blue-800 underline\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {row.nameZh}\n      </a>\n    ),\n    meta: 'w-[21%]',\n  },\n  {\n    header: 'Â±¨ÊÄß',\n    value: ({ row }: colValue) => <Icon.Game.Type type={row.type} className=\"h-6 w-full\" />,\n    meta: 'w-[15%]',\n  },\n  {\n    header: 'ÂàÜÈ°û',\n    value: ({ row }: colValue) => (\n      <Icon.Game.MoveCategory type={row.category} className=\"h-6 w-full\" />\n    ),\n    meta: 'w-[15%]',\n  },\n  {\n    header: 'Â®ÅÂäõ',\n    value: ({ row }: colValue) =>\n      row.power < 1 ? Accuracy[row.power.toString() as keyof typeof Accuracy] : row.power,\n    meta: 'w-[13%]',\n  },\n  {\n    header: 'ÂëΩ‰∏≠',\n    value: ({ row }: colValue) =>\n      row.accuracy < 1 ? Accuracy[row.accuracy.toString() as keyof typeof Accuracy] : row.accuracy,\n    meta: 'w-[13%]',\n  },\n  {\n    header: 'PP',\n    value: ({ row }: colValue) => row.PP,\n    meta: 'w-[13%]',\n  },\n];\n\nfunction MoveDex() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [expandedPanels, setExpandedPanels] = useState<Set<number>>(new Set());\n  const [pick, setPick] = useState<Set<number>>(new Set());\n  const [moveMap, setMoveMap] = useState<Record<number, FullMove>>({});\n  const [onlyEvolve, setOnlyEvolve] = useState<boolean>(true);\n\n  const filter: Filter = {\n    keyword: searchParams.get('keyword') || '',\n    type: searchParams.get('type') || '',\n    category: searchParams.get('category') || '',\n    page: Number(searchParams.get('page') || 1),\n  };\n\n  const { data: allMoves } = useMoveListInfo();\n\n  const updateState = (key: ValueKeys<Filter, string>[keyof Filter]) => {\n    return (val: string) => {\n      if (val === '') {\n        setSearchParams((prev) => {\n          prev.delete(key);\n          return prev;\n        });\n      } else {\n        setSearchParams((prev) => {\n          if (prev.has(key) && prev.get(key) === val) {\n            prev.delete(key);\n          } else {\n            prev.set(key, val);\n          }\n          prev.delete('page');\n          return prev;\n        });\n      }\n    };\n  };\n\n  const handleClick = async (panelKey: number, nameZh: string) => {\n    const updatedPanels = new Set(expandedPanels);\n    if (updatedPanels.has(panelKey)) {\n      updatedPanels.delete(panelKey);\n    } else {\n      updatedPanels.add(panelKey);\n\n      if (moveMap[panelKey] === undefined) {\n        const moveData = await api<FullMove>(`/data/move/${nameZh}.json`);\n        setMoveMap((prev) => {\n          prev[panelKey] = moveData;\n          return prev;\n        });\n      }\n    }\n\n    setExpandedPanels(updatedPanels);\n  };\n\n  return (\n    <div className=\"mb-4 flex flex-col gap-y-4\">\n      <Header filter={filter} updateState={updateState} />\n      <Hr />\n      <div className=\"-mx-4 flex flex-col gap-4 md:mx-0\">\n        <ul className=\"text-sm\">\n          <li\n            className={clsx(\n              'sticky top-0 flex bg-custom-gold/50',\n              'py-1 px-2 text-gray-100 md:-top-4 md:px-0'\n            )}\n          >\n            {columns.map((col) => (\n              <span\n                className={clsx('whitespace-nowrap py-1 text-center', col.meta)}\n                key={col.header}\n              >\n                {col.header}\n              </span>\n            ))}\n          </li>\n          {allMoves\n            .filter((move) => {\n              let display = true;\n\n              if (filter.keyword !== '') {\n                display =\n                  display &&\n                  (move.nameZh.includes(filter.keyword) ||\n                    move.description.includes(filter.keyword) ||\n                    move.nameEn.includes(filter.keyword) ||\n                    move.nameJp.includes(filter.keyword));\n              }\n\n              if (filter.type !== '') {\n                display = display && filter.type === move.type;\n              }\n\n              if (filter.category !== '') {\n                display = display && filter.category === move.category;\n              }\n\n              return display;\n            })\n            .sort((a, b) => {\n              if (pick.has(a.pid) && pick.has(b.pid)) {\n                return 0;\n              } else if (pick.has(a.pid)) {\n                return -1;\n              } else if (pick.has(b.pid)) {\n                return 1;\n              }\n              return 0;\n            })\n            .map((move) => {\n              const lilist = [\n                <li\n                  className={clsx(\n                    'flex cursor-pointer border-b-[1px] py-1 px-2 md:px-0',\n                    'hover:bg-gray-50',\n                    pick.has(move.pid) && 'bg-gray-100'\n                  )}\n                  key={move.pid}\n                  onClick={() => {\n                    handleClick(move.pid, move.nameZh);\n                  }}\n                >\n                  {columns.map((col) => (\n                    <span\n                      className={clsx(\n                        'whitespace-nowrap py-1 text-center leading-6',\n                        'flex justify-center',\n                        col.meta\n                      )}\n                      key={col.header}\n                    >\n                      {col.value({\n                        row: move,\n                        checked: pick.has(move.pid),\n                        fn: () => {\n                          setPick((prev) => {\n                            if (prev.has(move.pid)) {\n                              prev.delete(move.pid);\n                            } else {\n                              prev.add(move.pid);\n                            }\n                            return new Set([...prev]);\n                          });\n                        },\n                      })}\n                    </span>\n                  ))}\n                </li>,\n              ];\n\n              if (expandedPanels.has(move.pid)) {\n                lilist.push(\n                  <li\n                    className={clsx('flex border-b-[1px] p-4', 'bg-slate-50')}\n                    key={`${move.pid}-d`}\n                  >\n                    <MoveDetail\n                      move={moveMap[move.pid as keyof typeof moveMap]}\n                      onlyEvolve={onlyEvolve}\n                      setOnlyEvolve={setOnlyEvolve}\n                    />\n                  </li>\n                );\n              }\n\n              return lilist;\n            })\n            .flat()}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default MoveDex;\n","import { useQuery } from '@tanstack/react-query';\nimport { api } from '@/utils';\nimport { Move } from '@/types/Pokemon';\n\nexport const useMoveListInfo = () => {\n  const { data, status, ...rest } = useQuery<Move[]>(['move'], () =>\n    api<Move[]>(`/data/move_list_201.json`)\n  );\n\n  return {\n    status,\n    data: data ?? [],\n    ...rest,\n  };\n};\n"],"names":["PokemonBadge","pm","size","text","className","clsx","BgFromType","types","BgToType","length","to","link","nameZh","altForm","getAttackRange","TYPE_MAP","map","type","rates","atkType","weaknessMap","filter","rate","TypeRate","targetRate","matchType","reduce","pmType","getWeaknessType","Weakness","terasType","AttackRange","Header","updateState","typeUpdate","categoryUpdate","placeholder","value","keyword","onChange","title","onClick","list","name","val","currVal","category","MoveDetail","move","onlyEvolve","setOnlyEvolve","id","checked","e","target","htmlFor","description","levelingUps","undefined","child","level","LevelMap","egg","TM","pid","toString","padStart","leaguePoint","materials","part","count","join","columns","header","fn","stopPropagation","meta","row","href","rel","power","Accuracy","accuracy","PP","useSearchParams","searchParams","setSearchParams","useState","Set","expandedPanels","setExpandedPanels","pick","setPick","moveMap","setMoveMap","get","page","Number","allMoves","useQuery","api","data","status","rest","useMoveListInfo","handleClick","panelKey","updatedPanels","has","delete","add","moveData","prev","key","set","Hr","col","display","includes","nameEn","nameJp","sort","a","b","lilist","push","flat"],"sourceRoot":""}